<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Outcomes: How Much Is Your Major Worth?</title>

    <script src="https://d3js.org/d3.v7.min.js"></script>

    <style>
        body {
            font-family: Georgia, 'Times New Roman', Times, serif;
            margin: 20px;
            background-color: #f0f0f0;
        }

        h1 {
            color: #333;
        }

        p {
            margin: 5 auto 20px;
        }

        a {
            color: #007BFF;
        }

        svg {
            margin: 10px 0;
            border-radius: 1px;
        }
    </style>
</head>

<body>

    <!-- Header -->
    <h1>
        How much is your major <strong>really</strong> worth?
    </h1>
    <p>
        A bit depressing to consider, but lets look at some data regarding the current job market.
        <br> Data sourced from the <a href="https://www.newyorkfed.org/research/college-labor-market#--:overview">NY
            Federal Reserve</a>.
    </p>


    <svg id='unemployment' height="250" width="700"
        style="background: rgb(224, 224, 224); margin-top:5px; margin-left: 50px;">
    </svg>

    <p>
        Recent graduates have a higher employment rate, but do these graduates require their degree for their work?

    </p>

    <div id="buttons"></div>
    <svg id='majors' height="800" width="600"
        style="background: rgb(195, 195, 195); margin-top:5px; margin-left: 50px;">
    </svg>


    <!-- Scripts -->
    <script>
        const plot = d3.select('#unemployment')
        const width = plot.attr('width')
        const height = plot.attr('height')
        const margin = { top: 50, right: 35, bottom: 35, left: 35 };
        const chartWidth = width - margin.left - margin.right;
        const chartHeight = height - margin.top - margin.bottom;
        const yAxisArea = plot.append("g")
            .attr("transform", "translate(" + (margin.left - 2) + "," + margin.top + ")");
        const xAxisArea = plot.append("g")
            .attr("transform", "translate(" + margin.left + "," + (chartHeight + 2 + margin.top) + ")");
        const chartArea = plot.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");



        const requestMarketData = async function () {
            var unemployed = await d3.csv("datasets/unemployed.csv", d3.autotype)
            // console.log(unemployed)

            // parse time
            var parseTime = d3.timeParse("%m/%d/%Y")
            var dates = [];
            unemployed.forEach(d => {
                dates.push(parseTime(d.Date))

            });
            // console.log(dates)

            const minRateExtent = d3.extent(unemployed, d => d3.min([Number(d['Young workers']), Number(d['All workers']), Number(d['recent Graduates'])]))
            const maxRateExtent = d3.extent(unemployed, d => d3.max([Number(d['Young workers']), Number(d['All workers']), Number(d['recent Graduates'])]))
            const rateExtent = d3.extent([minRateExtent[0] - 2, maxRateExtent[1] + 1])
            const dateExtent = d3.extent(dates)

            // console.log(minRateExtent)
            // console.log(maxRateExtent)

            // console.log(rateExtent)
            // console.log(dateExtent)

            // create axes
            // X Axis (Time)
            const dateScale = d3.scaleLinear()
                .domain(dateExtent)
                .range([0, chartWidth])

            let bottomAxis = d3.axisBottom(dateScale)
                .tickFormat(d3.timeFormat('%Y'))

            xAxisArea.append('g')
                .attr('class', 'x axis')
                .call(bottomAxis)

            // Y Axis (Rate of Unemployment)
            const rateScale = d3.scaleLinear()
                .domain(rateExtent)
                .range([0, chartHeight])

            let leftAxis = d3.axisLeft(rateScale)

            yAxisArea.append('g')
                .attr('class', 'y axis')
                .call(leftAxis)

            // plot lines

            // young workers (22-27 no degree)
            chartArea.selectAll("path.yw")
                .data([unemployed])
                .enter().append("path")
                .attr('stroke-width', 1)
                .attr('stroke', 'red')
                .attr('fill', 'none')
                .attr('d', d3.line()
                    .x(d => dateScale(parseTime(d['Date'])))
                    .y(d => rateScale(d['Young workers'])))

            // all workers
            chartArea.selectAll("path.aw")
                .data([unemployed])
                .enter().append("path")
                .attr('stroke-width', 1)
                .attr('stroke', 'blue')
                .attr('fill', 'none')
                .attr('d', d3.line()
                    .x(d => dateScale(parseTime(d['Date'])))
                    .y(d => rateScale(d['All workers'])))

            // recent graduates
            chartArea.selectAll("path.rg")
                .data([unemployed])
                .enter().append("path")
                .attr('stroke-width', 1)
                .attr('stroke', 'green')
                .attr('fill', 'none')
                .attr('d', d3.line()
                    .x(d => dateScale(parseTime(d['Date'])))
                    .y(d => rateScale(d['Recent graduates'])))


            // mouse-over ------------

            // .selectAll('.hover').data(unemployed).enter()
            let verticalLine = chartArea.append("line")
                .attr('stroke-width', 1)
                .attr('opacity', 0.5)
                .attr('stroke', 'white')
                .attr('fill', 'none')
                .attr('x1', chartWidth)
                .attr('y1', 0)
                .attr('x2', chartWidth)
                .attr('y2', chartHeight)

            function createScrubCircle() {
                return chartArea.append('circle')
                    .attr('cx', 0)
                    .attr('cy', 0)
                    .attr('r', 3)
                    .attr('opacity', 0.5)
                    .attr('fill', 'none')
            }

            let circleYW = createScrubCircle();
            let circleAW = createScrubCircle();
            let circleRG = createScrubCircle();

            let text = chartArea.append('text')
                .attr('x', 0)
                .attr('y', 0)
                .attr('dy', -10)
                .attr('text-anchor', 'middle')
                .attr('fill', 'white')
                .text('')



            // check if mouse movement is in the area of the window via the overlay. 
            let overlay = chartArea.append("rect")
                .attr("class", "overlay")
                .attr("width", chartWidth + 10)
                .attr("height", chartHeight + 10)
                .style("fill", "white")
                .style('opacity', 0)
                .on("mouseover", mousemove)
                .on("mouseout", mouseout)
                .on("mousemove", mousemove);


            function mousemove() {
                var coordinates = d3.pointer(event, this);
                // console.log(coordinates)

                verticalLine.attr('x1', coordinates[0])
                    .attr('y1', 0)
                    .attr('x2', coordinates[0])
                    .attr('y2', chartHeight)
                    .attr('stroke', 'white')

                // snap to the nearest time coordinate
                let timestamp = new Date(dateScale.invert(coordinates[0]))
                let element = unemployed[d3.bisect(dates, timestamp)]

                // console.log(element)

                circleYW
                    .attr('cx', dateScale(parseTime(element['Date'])))
                    .attr('cy', rateScale(element["Young workers"]))
                    .attr('fill', 'red')

                circleAW
                    .attr('cx', dateScale(parseTime(element['Date'])))
                    .attr('cy', rateScale(element["All workers"]))
                    .attr('fill', 'blue')

                circleRG
                    .attr('cx', dateScale(parseTime(element['Date'])))
                    .attr('cy', rateScale(element["Recent graduates"]))
                    .attr('fill', 'green')

                text
                    .attr('x', coordinates[0])
                    .text((d3.timeFormat('%b-%Y'))(timestamp))



            }


            // make line invisible
            function mouseout() {
                var coordinates = d3.pointer(event, this);
                // console.log(coordinates)

                verticalLine.attr('stroke', 'none')

                circleYW
                    .attr('fill', 'none')

                circleAW
                    .attr('fill', 'none')

                circleRG
                    .attr('fill', 'none')

                text.text('')
            }

        }

        requestMarketData();
    </script>

    <script>
        const plot2 = d3.select('#majors')
        const width2 = plot2.attr('width')
        const height2 = plot2.attr('height')
        const margin2 = { top: 20, right: 40, bottom: 35, left: 200 };
        const chartWidth2 = width2 - margin2.left - margin2.right;
        const chartHeight2 = height2 - margin2.top - margin2.bottom;
        const yAxisArea2 = plot2.append("g")
            .attr("transform", "translate(" + (margin2.left - 2) + "," + margin2.top + ")");
        const xAxisArea2 = plot2.append("g")
            .attr("transform", "translate(" + margin2.left + "," + (chartHeight2 + 6 + margin2.top) + ")");
        const chartArea2 = plot2.append("g").attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

        const requestMajorData = async function () {
            const majorData = await d3.csv('datasets/majorOutcomes.csv', d3.autotype);

            const rateScale = d3.scaleLinear()
                .domain([0, 100]) 
                .range([0, chartWidth2]);

            const majorScale = d3.scaleBand()
                .range([0, chartHeight2])
                .padding(0.1); 

            xAxisArea2.append('g')
                .call(d3.axisBottom(rateScale));

            console.log(majors)

            const majorCategories = {
                "All": majorData.map(d => d["Major"]),
                "STEM": ["Computer Science", "Mathematics", "Physics", "Chemistry", "Biochemistry", "Biology",
                    "General Engineering", "Aerospace Engineering", "Chemical Engineering", "Civil Engineering",
                    "Computer Engineering", "Electrical Engineering", "Industrial Engineering", "Mechanical Engineering", "Environmental Studies", "Agriculture", "Nutrition Sciences"],
                "Business": ["General Business", "Accounting", "Business Management", "Business Analytics", "Finance", "Marketing", "International Affairs"],
                "Education": ["General Education", "Early Childhood Education", "Elementary Education", "Secondary Education", "Special Education"],
                "Social Sciences": ["Political Science", "Psychology", "Sociology", "Economics", "Criminal Justice", "Public Policy and Law", "Anthropology", "Geography"],
                "Arts & Humanities": ["Fine Arts", "Performing Arts", "Commercial Art & Graphic Design", "Art History",
                    "Philosophy", "History", "Theology and Religion", "Foreign Language", "Liberal Arts", "English Language"],
                "Health": ["Nursing", "Pharmacy", "Medical Technicians", "Treatment Therapy", "Health Services"],
                "Communications": ["Journalism", "Mass Media", "Advertising and Public Relations", "Communications"],
                "Miscellaneous": ["Family and Consumer Sciences", "Construction Services", "Leisure and Hospitality", "Miscellaneous Technologies"]
            };

            const buttonContainer = d3.select("#buttons");

            buttonContainer.selectAll("button")
                .data(Object.keys(majorCategories)) 
                .enter()
                .append("button")
                .text(d => d) 
                .on("click", function (event, category) {
                    updateChart(category); 
                });

            function updateChart(selectedCategory) {
              
                let filtered = majorData.filter(d => majorCategories[selectedCategory].includes(d["Major"]));

   
                majorScale.domain(filtered.map(d => d["Major"]));


                yAxisArea2.transition()
                    .duration(300)
                    .call(d3.axisLeft(majorScale));

                chartArea2.selectAll('line').remove();

                let lines = chartArea2.selectAll('line')
                    .data(filtered);

                lines.enter()
                    .append('line')
                    .merge(lines) 
                    .transition().duration(300)
                    .attr("stroke-width", 2)
                    .attr("stroke", "#a63d40")
                    .attr('x1', rateScale(0))
                    .attr('y1', d => majorScale(d['Major']) + majorScale.bandwidth() / 2)
                    .attr('x2', d => rateScale(d['Underemployment Rate']))
                    .attr('y2', d => majorScale(d['Major']) + majorScale.bandwidth() / 2);


                function updateCircles(className, dataKey, color) {

                    chartArea2.selectAll(`circle.${className}`).remove();

                    let circles = chartArea2.selectAll(`circle.${className}`).data(filtered);

                    //circles.selectAll("circle").remove(); 

                    circles.enter()
                        .append("circle")
                        .merge(circles) 
                        .transition().duration(300)
                        .attr("class", className)
                        .attr("cy", d => majorScale(d["Major"]) + majorScale.bandwidth() / 2)
                        .attr("cx", d => rateScale(d[dataKey]))
                        .attr("r", 3)
                        .attr("fill", color);
                }

                updateCircles("unemp", "Unemployment Rate", "red");
                updateCircles("undemp", "Underemployment Rate", "blue");
            }

            updateChart("All");
        };


        requestMajorData();


    </script>
</body>

</html>